#!/bin/bash

# efc_single [ encrypt / decrypt a single file]
# MIT license (MIT)

# Util script to symmetrically encrypt / decrypt individual file or given folder using the gpg lib.
: '
Features:
- Accept user given path to a folder or a file.
- Request user to enter a password.
- Encrypt/Decrypt file(s).
- User can choose the delete the source files.
'

# Load the util functions
dependencies_loaded=0
# TODO: support collecting the output extention from user input.
ENCRYPTED_FILE_EXT='gpg'

load_dependencies() {
    # check dependencies exists in current folder, yes -> set variable, no -> read from env. location
    source_path=$(pwd)
    lib_location="$source_path/efc_lib"

    if [ ! -f "$lib_location" ]; then

        # check for the folder path in bash profile
        if [ -z "$EFC_PATH" ]; then
            echo "WARNING: missing the environmen variable EFC_PATH on local bash profile."
        elif [ ! -f "$EFC_PATH/efc_lib" ]; then
            echo "WARNING: invalid source is provided in the EFC_PATH. It should be the source location."
        else
            echo "[info]reading the EFC_PATH from local bash profile : $EFC_PATH"
            source "$EFC_PATH/efc_lib"
            dependencies_loaded=1
        fi
    else
        # setting the EFC_PATH location to execution folder
        export EFC_PATH="$source_path"
        echo "[info] setting the EFC_PATH to current location : $EFC_PATH"
        source "$EFC_PATH/efc_lib"
        dependencies_loaded=1
    fi
}

ts=$(date +%s)

accept_task_flag() {
    if [[ $1 = "e" ]]; then
        isEnrypt='e'
    elif [[ $1 = "d" ]]; then
        isEnrypt='d'
    else
        echo "[error] invalid task! should be e = for encrypt , d = for decrypt"
        exit
    fi
}

accept_zip_falg() {
    if [[ $1 = "yes" ]]; then
        zipFolders='yes'
    else
        zipFolders='no'
    fi
}

accept_delete_falg() {
    if [[ $1 = "yes" ]]; then
        isDelete='yes'
    else
        isDelete='no'
    fi
}

user_input() {

    read -p "Delete the source file ? (yes/no) [no] :" isDelete

    if [ -z "$isDelete" ]; then
        echo -e ' \t' "source file will NOT be deleted."
        isDelete='no'
    elif [ $isDelete == 'yes' ]; then
        echo -e ' \t' "source file will be DELETED!"
    fi

    while true; do
        read -p "Encrypt or Decrypt ? (e/d) : " isEnrypt

        case $isEnrypt in
        [eE]*)
            echo -e ' \t' "all the files will be Encrypted!"

            if [[ -d $1 ]]; then

                read -p "Do you want to zip folders found in the path ? (yes/no) [no] : " zipFolders

                if [ -z "$zipFolders" ] && [ "$zipFolders" != 'yes' ]; then
                    echo -e ' \t' "content will be encrypted as separate files."
                else
                    echo -e ' \t' "content will be archived and before the encryption."
                fi

            fi

            break
            ;;

        [dD]*)
            echo -e ' \t' "all the files will be Decrypted!"
            break
            ;;

        *) echo -e ' \t' "please enter e for Encrypt  or d for Decrypt." ;;
        esac
    done

    while true; do

        echo -n "Provide the password for the operation : "
        read -s password

        if [ -z "$password" ]; then
            echo -e '\n\t' "password can not be empty, please provide a valid password."
        else
            break
        fi

    done

    if [ "$isEnrypt" == "e" ]; then

        while true; do

            read -sp "Confirm the password :" password_confirmed

            if [ "$password" == "$password_confirmed" ]; then
                break
            else
                echo -e ' \n\t' "password does not match, please confirm the password."
            fi

        done
    fi

    echo -e ' \n\t' "starting the operation using the provided password." '\n'

}

process_all_files_in_dir() {

    if [ -z "${2}" ]; then
        echo "[info] output location is not provided, using the same location of the source file."
        OUTPUT_DIR="$1"
    else
        # create the folder if not exists
        mkdir -p "$2"
        if test -d "${2}"; then
            OUTPUT_DIR="$2"
            echo "[info] output location is provided, using the location: $OUTPUT_DIR"
        else
            echo "[info] output location is invalid, using the source location."
        fi
    fi

    find "$1" -print |
        while read file; do
            #echo "FILE :: $file"

            if [[ -d $file ]]; then

                #echo "Insdie : DIR  $file"
                # create the folder in output location if OUTPUT_DIR is provided
                relative_path=$(realpath --relative-to="$1" "$file")
                mkdir -p "$OUTPUT_DIR/$relative_path"
            else

                # generate the file name if OUTPUT_DIR is provided
                src_name=$(basename "$file")
                src_path=$(dirname "$file")
                relative_path=$(realpath --relative-to="$1" "$src_path")
                # remove . path from relative path
                #relative_path="${relative_path//./""}"

                if [[ $isEnrypt == 'e' ]]; then
                    echo "[info] ENC the file : $1"
                    OUTPUT_FILE="$OUTPUT_DIR/$relative_path/$src_name.$ENCRYPTED_FILE_EXT"
                    #echo "OUTD :: $OUTPUT_FILE"
                    encrypt "$file" "$password" $isDelete "$OUTPUT_FILE"
                    #increase_count $?
                    ((counter++))
                fi

                if [[ $isEnrypt == 'd' ]]; then
                    echo "[info] DEC the file : $1"
                    src_name="${src_name%.*}"
                    OUTPUT_FILE="$OUTPUT_DIR/$relative_path/$src_name"
                    #echo "OUTD :: $OUTPUT_FILE"
                    decrypt "$file" "$password" $isDelete "$OUTPUT_FILE"
                    ((counter++))
                fi
            fi
        done
}

handle_output_location() {
    # $1 - src locatoin
    # $2 - output location

    if [ -z "${2}" ]; then
        echo "[info] output file name is not provided, using the same location to store the generated file."
    else
        dir_path=$(dirname "$2")
        # create the root folder if not exists
        mkdir -p "$dir_path"
        if test -d "${2}"; then
            echo "[info] output file name is provided: $2"
        fi
    fi
}

process_file() {

    handle_output_location "$1" "$2"

    if [[ $isEnrypt == 'e' ]]; then
        encrypt "$1" "$password" $isDelete "$2"
    fi

    if [[ $isEnrypt == 'd' ]]; then
        decrypt "$1" "$password" $isDelete "$2"
    fi

}

zip_folder() {
    if [ "$zipFolders" == 'yes' ]; then
        echo "Start archiving process..."
        zip_all_folders "$1" $isDelete
    fi
}

print_help() {

    echo -e "\nUsage: efc [FILE/FOLDER] [OPTIONS...] :

Examples:
\t efc /data/to_encrypt \t# will prompt the user intractive mode.
\t efc -s /data/to_encrypt -t e -p password.txt -d yes -z no \t# will perfom the encryption task on the given folder.

Global options :
\t --help | help | print help options.
\t --version | version | print current version and dependencies.
\t --upgrade | upgrade | upgrade to latest version.

Intractive mode:
\t efc [FILE/FOLDER] \t provide the folder path or file directly without other parameters.

Silent mode:
\t -s | source | source file/folder to encrypt/decrypt.
\t -o | output | full path of the output file for single files / full folder path of for recursive folders .
\t -t | task | task to perform either encrypt or decrypt.
\t -p | password_source | file path or URL to a remote file containing the passphrase (1st line will be read).
\t -d | delete_source | once the task is completed: yes, to delete the source file.
\t -z | zip_sub_folders | when encrypting yes to zip, the subfolders before that task no to avoid compressing."
}

start_process() {
    if [ $# -eq 0 ]; then
        echo "[warn] No folder/file provided, exiting.\n"
        print_help
        exit 1
    elif [[ "$1" == '--version' ]]; then
        print_version_info
        exit 1
    elif [[ "$1" == '--help' ]]; then
        print_help
        exit 1
    elif [[ "$1" == '--upgrade' ]]; then
        current_path=$(dirname "$0")
        upgaded
        exit 1
    else
        if [[ -d "$1" ]]; then
            echo "[info] using the directory : $1"
            user_input "$1"
            echo -e "\n"
            zip_folder "$1"
            echo -e "\n"
            process_all_files_in_dir "$1" "$2"
        elif [[ -f $1 ]]; then
            echo "[info] processing the file : $1"
            user_input $1
            process_file "$1" "$2"
        else
            echo -e '\n' "[warn] invalid input, must be a folder or a file : $1"
            print_help
            exit 1
        fi
    fi
}

file_has_mearged() { declare -F encrypt >/dev/null; }
dependencies_loaded=$(file_has_mearged && echo 1 || echo 0)

if [ $dependencies_loaded -eq 0 ]; then
    load_dependencies
fi

if [[ $# -gt 1 ]]; then

    while getopts s:o:t:p:d:z: opts; do
        case ${opts} in
        s) source="${OPTARG}" ;;
        o) output="${OPTARG}" ;;
        t) operation="${OPTARG}" ;;
        p) password_source="${OPTARG}" ;;
        d) delete_source="${OPTARG}" ;;
        z) zip_sub_folders="${OPTARG}" ;;
        *)
            echo -e "[error] invalid parameter, \ntry -help for more information"
            exit
            ;;
        esac
    done

    accept_task_flag "$operation"
    extract_password "$password_source"
    accept_delete_falg "$delete_source"
    accept_zip_falg "$zip_sub_folders"

    if [[ -d "$source" ]]; then
        echo "[info] using the directory : $source"
        zip_folder "$source"
        process_all_files_in_dir "$source" "$output"
    elif [[ -f "$source" ]]; then
        echo "[info] processing the file : $source"
        process_file "$source" "$output"
    else
            echo -e '\n' "[warn] invalid input, must be a folder or a file : $source"
    fi

else
    start_process "$1" "$output"
fi
